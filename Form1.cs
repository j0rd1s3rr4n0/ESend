using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Mail;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net;
using System.Net.Mail;
using System.IO;
using System.Collections;
using System.Xml;
using Newtonsoft.Json;
using MailKit.Security;
using System.Data.OleDb;
using System.Net.Sockets;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;
using static System.Net.Mime.MediaTypeNames;

namespace EnviadorEmails
{
    public partial class Form1 : Form
    {
        ArrayList personas = new ArrayList();
        string filePath = "";
        string configFile = "config.conf";
        Config config = new Config();
        int numEnviados = 0;
        int numTotal = 0;
        int numTotalTotal = 0;
        int numErrors = 0;
        int tiempoEspra = 2;
        string ruta = "C:\\";

        Boolean is_stop = false;
        Boolean carpeta_defined = false;

        public Form1()
        {
            InitializeComponent();
        }
        // nombre_apellidos ; email ; fichero.pdf
        /**
        * Maneja el evento click del botón "button1".
        *
        * Esta función se ejecuta cuando se hace clic en el botón "button1". Realiza el envío de correos electrónicos
        * a las personas especificadas en la lista de personas. Lee la configuración del archivo de configuración,
        * establece los parámetros del cliente SMTP, construye el mensaje de correo electrónico y lo envía.
        * Actualiza el estado del envío en la interfaz de usuario.
        *
        * @param sender El objeto que ha generado el evento.
        * @param e Los argumentos del evento.
        * @return Nada.
        */
        private async void button1_ClickAsync(object sender, EventArgs e)
        {
            if (carpeta_defined)
            {
                is_stop = false;
                numErrors = 0;
                tv_NumErrores.Text = numErrors.ToString();
                int tst = 0;
                bool manual = false;
                foreach (Persona persona in personas)
                {

                    await readConfigFile();

                    string myemail = config.Email.ToString();
                    string mypassword = config.Contraseña.ToString();
                    string server = config.Servidor.ToString();
                    int port = Int32.Parse(config.Puerto.ToString());


                    SmtpClient client = new SmtpClient(server, port);
                    client.UseDefaultCredentials = false;
                    // PASSWORD GENERATED BY https://myaccount.google.com/apppasswords
                    client.Credentials = new NetworkCredential(myemail, mypassword);
                    client.EnableSsl = true;

                    MailMessage mailMessage = new MailMessage();
                    mailMessage.From = new MailAddress(myemail);
                    string selectedFileName;
                    mailMessage.CC.Add(myemail);
                    //mailMessage.Subject = "Subject: Heyy";
                    //mailMessage.Body = "Body: heyyy!";
                    DateTime fecha = DateTime.Now;
                    string fechaFormateada = fecha.ToString("dd/MM/yyyy");
                    string emailTo = "jordiserrano@protonmail.ch";
                    mailMessage.DeliveryNotificationOptions = System.Net.Mail.DeliveryNotificationOptions.OnSuccess;
                    mailMessage.Headers.Add("Disposition-Notification-To", "<" + myemail + ">");
                    mailMessage.Headers.Add("Return-Receipt-To", "<" + myemail + ">");
                    string nombre = "Nombre_Default";
                    if (manual)
                    {
                        emailTo = "jordiserrano@proton.me";
                        mailMessage.To.Add(emailTo);
                        nombre = "NombreManual";
                        OpenFileDialog openFileDialog1 = new OpenFileDialog();
                        switch (ruta != "C:\\" && ruta.Length > 3 && Directory.Exists(ruta))
                        {
                            case true: openFileDialog1.InitialDirectory = ruta; break;
                            default: openFileDialog1.InitialDirectory = "C:\\"; break;
                        }
                        openFileDialog1.FilterIndex = 0;
                        openFileDialog1.RestoreDirectory = true;

                        if (openFileDialog1.ShowDialog() == DialogResult.OK)
                        {

                        }

                    }
                    else
                    {
                        if (is_stop == false)
                        {
                            nombre = persona.Nombre;
                            selectedFileName = ruta + "\\" + persona.Archivo;
                            tst += 1;
                            try
                            {
                                // Escribir en el archivo todo.csv

                                // Agregar al archivo done.csv
                                File.AppendAllText("Results/done.csv", $"{persona.Nombre},{persona.Email},{persona.Archivo}\n");

                                // Mostrar un mensaje con el nombre de la persona
                                //MessageBox.Show(persona.Nombre);
                                emailTo = persona.Email;
                                mailMessage.To.Add(emailTo);
                                await Task.Run(async () =>
                                {
                                    if (cb_requireFile.Checked == true)
                                    {
                                        Attachment atachment = new Attachment(selectedFileName);
                                        mailMessage.Attachments.Add(atachment);
                                        string[] textSplit = selectedFileName.Split(new string[] { "\\" }, StringSplitOptions.None);
                                        string fichero_txt = textSplit[textSplit.Length - 1];
                                    }
                                    else
                                    {
                                        if(selectedFileName != null && selectedFileName != "")
                                        {
                                            Attachment atachment = new Attachment(selectedFileName);
                                            mailMessage.Attachments.Add(atachment);
                                        }
                                        else{
                                        string[] textSplit = selectedFileName.Split(new string[] { "\\" }, StringSplitOptions.None);
                                        string fichero_txt;
                                        switch (textSplit[textSplit.Length - 1].Length)
                                        {
                                            case 0: fichero_txt = "No Se Asigno Ningun Archivo";break;
                                            default: fichero_txt = textSplit[textSplit.Length - 1];break;
                                        }


                                    }
                                    

                                    mailMessage.Subject = config.Asunto.ToString()
                                      .Replace("$name$", nombre)
                                          .Replace("$email$", emailTo)
                                              .Replace("$file$", fichero_txt)
                                                .Replace("$fecha", fechaFormateada);

                                    if (config.Cuerpo.ToString().Contains("<html"))
                                    {
                                        mailMessage.IsBodyHtml = true;


                                        mailMessage.Body = config.Cuerpo.ToString()
                                                            .Replace("$name$", nombre)
                                                                .Replace("$email$", emailTo)
                                                                    .Replace("$file$", fichero_txt)
                                                                    .Replace("$fecha$", fechaFormateada);
                                        mailMessage.Headers.Add("Content-Type", "text/html");
                                    }
                                    else
                                    {
                                        mailMessage.IsBodyHtml = false;


                                        mailMessage.Body = config.Cuerpo.ToString()
                                                            .Replace("$name$", nombre)
                                                                .Replace("$email$", emailTo)
                                                                    .Replace("$file$", selectedFileName)
                                                                    .Replace("$fecha$", fechaFormateada);
                                        mailMessage.Headers.Add("Content-Type", "text/plane");
                                    }

                                    try
                                    {
                                        //client.Send(mailMessage);
                                        if (is_stop == false)
                                        {
                                            int sleeperint = GetRandomNumberEspera();
                                            await tempspera(sleeperint);
                                            if (is_stop == false)
                                            {
                                                await client.SendMailAsync(mailMessage).ConfigureAwait(false);
                                            }
                                            else { MessageBox.Show("Email No Enviado!"); }
                                        }
                                        else { MessageBox.Show("Email No Enviado!"); }
                                    }
                                    catch (Exception ex)
                                    {
                                        // Verificar conexión a Internet
                                        string error = que_ha_pasat(ex);
                                        MessageBox.Show(error);
                                        numEnviados -= 1;
                                        numErrors += 1;
                                    }
                                });
                                numEnviados += 1;
                                numTotal -= 1;
                            }
                            catch (Exception ex)
                            {
                                // Escribir en el archivo errors.csv
                                File.AppendAllText("Results/errors.csv", $"{persona.Nombre},{persona.Email},{persona.Archivo},{ex.Message}\n");
                                numErrors += 1;
                                numTotal -= 1;

                            }
                            tv_NumErrores.Text = numErrors.ToString().Replace("-", "");
                            tv_NumEnviados.Text = numEnviados.ToString().Replace("-", "") + "/1000";
                            tv_NumPendientes.Text = numTotal.ToString().Replace("-", "") + "/" + numTotalTotal.ToString().Replace("-", "");

                            tv_TiempoEspera.Text = "-";
                        }
                    }
                }
            }
            else
            {
                MessageBox.Show("Es Necesario Especificar la ruta\n de donde extraera los archivos que se\nespecifican en el csv", "ERROR");
            }
        }
        /**
        * Determina el tipo de error que ha ocurrido.
        *
        * Esta función analiza la excepción y determina el tipo de error que ha ocurrido
        * en función de la configuración y los resultados de las pruebas de conexión SMTP.
        * Devuelve una cadena que describe el tipo de error.
        *
        * @param ex La excepción que ha ocurrido.
        * @return Una cadena que describe el tipo de error.
        */
        private string que_ha_pasat(Exception ex)
        {
            readConfigFile();
            if(testConnection()){
                return "ERROR CONEXION";
            }
            else if (IsSMTPOpen(config.Servidor))
            {
                return "ERROR DE CONEXION - COMPRUEBE NUEVAMENE EL PUERTO";
            }
            else if (TestSmtpServerConnection(config.Servidor, Int32.Parse(config.Puerto.ToString())))
            {
                return "ERROR SERVIDOR - CONEXION SMTP";
            }
            else if (CheckCredentials())
            {
                return "ERROR DE CREDENCIALES";
            }
            else
            {
                return ex.Message.ToString();
            }
        }
        /**
        * Realiza una espera de tiempo.
        *
        * Esta función realiza una espera de tiempo en segundos, actualizando un componente de la interfaz de usuario.
        * Al finalizar la espera, restablece el componente a su estado inicial.
        *
        * @param a El tiempo de espera en segundos.
        * @return Una tarea que representa la operación asincrónica.
        */
        public async Task tempspera(int a)
        {
            for(int i = a; i>0; i--)
            {
                System.Threading.Thread.Sleep(1000);
                tv_TiempoEspera.Text = i.ToString() + "s";
            }
            tv_TiempoEspera.Text = "0s";
            System.Threading.Thread.Sleep(500);
            tv_TiempoEspera.Text =  "-";
        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {

        }

        private void label17_Click(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void textBox4_TextChanged(object sender, EventArgs e)
        {

        }



        // Configuración Image
        /**
        * Evento de clic en el PictureBox 2.
        *
        * Este evento se dispara cuando se hace clic en el PictureBox 2.
        * Abre la configuración y lee el archivo de configuración de forma asíncrona.
        *
        * @param sender El objeto que desencadenó el evento.
        * @param e Los argumentos del evento.
        */
        private async void pictureBox2_ClickAsync(object sender, EventArgs e)
        {
            //await Task.Run(() => openConfig());
            openConfig();
            await readConfigFile();
        }
        // Configuración Button
        /**
        * Evento de clic en el botón Config.
        *
        * Este evento se dispara cuando se hace clic en el botón Config.
        * Abre la configuración y lee el archivo de configuración de forma asíncrona.
        *
        * @param sender El objeto que desencadenó el evento.
        * @param e Los argumentos del evento.
        */
        private async void btnConfig_ClickAsync(object sender, EventArgs e)
        {
            //await Task.Run(() => openConfig());
            openConfig();
            await readConfigFile();
        }
        /**
        * Abre la configuración.
        *
        * Esta función crea una instancia del formulario FormSettings y lo muestra.
        *
        * @return Una tarea que representa la operación asincrónica.
        */
        private async Task openConfig()
        {
            Form formulario = new FormSettings();
            formulario.Show();
        }
        /**
        * Lee el archivo de configuración.
        *
        * Esta función lee el archivo de configuración y carga los valores en la variable de configuración.
        * Si el archivo no existe o hay un error al leerlo, se crea un nuevo archivo de configuración con valores predeterminados.
        *
        * @return Una tarea que representa la operación asincrónica.
        */
        public async Task readConfigFile()
        {
            try
            {
                string json = File.ReadAllText(configFile);
                config = JsonConvert.DeserializeObject<Config>(json);
                tv_emailEnUso.Text = config.Email.ToString();

            }
            catch (Exception ex)
            {
                config = new Config
                {
                    Email = "",
                    Contraseña = "",
                    Servidor = "",
                    Puerto = 0,
                    Asunto = "",
                    Cuerpo = "",
                };

                string json = JsonConvert.SerializeObject(config, Newtonsoft.Json.Formatting.Indented);
                File.WriteAllText(configFile, json);
            }
        }
        /**
        * Evento de clic en el botón ReadFile.
        *
        * Este evento se dispara cuando se hace clic en el botón ReadFile.
        * Abre un cuadro de diálogo para seleccionar un archivo y realiza acciones en base al archivo seleccionado.
        *
        * @param sender El objeto que desencadenó el evento.
        * @param e Los argumentos del evento.
        */
        private void btn_ReadFile(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Filter = "Archivo de Personas (*.csv, *.txt)|*.csv;*.txt";
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    carpeta_defined = false;
                    grid_datos.Rows.Clear();
                    personas.Clear();
                    personas = new ArrayList();
                    filePath = openFileDialog.FileName;

                }
            }
            if (filePath != null && filePath.Length > 0)
            {
                tb_fileNameData.Text = filePath;
                string[] lines = File.ReadAllLines(filePath);

                for (int i = 1; i < lines.Length; i++)
                {
                    string[] fields = lines[i].Split(',');
                    personas.Add(new Persona
                    {
                        Nombre = fields[0],
                        Email = fields[1],
                        Archivo = fields[2]
                    });
                }


                try { if (!Directory.Exists("Results")) { Directory.CreateDirectory("Results"); } }
                catch (Exception ext) { MessageBox.Show(ext.ToString()); }



                string rutaTodo = @"Results\todo.csv";
                string rutaDone = @"Results\done.csv";
                string rutaErrors = @"Results\errors.csv";
                string rutaCarpeta = @"Results\" + DateTime.Now.ToString("dd_MM_yyyy_ff_f_ffff_fffff_fff");
                // Verificar si existen las carpetas y archivos
                if (Directory.Exists(@"Results"))
                {
                    if (File.Exists(rutaTodo))
                    {
                        // Crear una nueva carpeta con la fecha actual
                        if (!Directory.Exists(rutaCarpeta))
                        {
                            Directory.CreateDirectory(rutaCarpeta);
                        }
                        // Mover done.csv a la nueva carpeta
                        File.Move(rutaTodo, rutaCarpeta + @"\todo.csv");
                    }
                    if (!File.Exists(rutaTodo))
                    {
                        foreach (Persona persona in personas)
                        {
                            using (StreamWriter sw = new StreamWriter("Results/todo.csv", true))
                            { sw.WriteLine($"{persona.Nombre},{persona.Email},{persona.Archivo}"); }
                        }
                        MessageBox.Show("HEYY");
                    }
                    //MessageBox.Show("OUCH!");

                    if (File.Exists(rutaDone))
                    {
                        // Crear una nueva carpeta con la fecha actual
                        if (!Directory.Exists(rutaCarpeta))
                        {
                            Directory.CreateDirectory(rutaCarpeta);
                        }
                        // Mover done.csv a la nueva carpeta
                        File.Move(rutaDone, rutaCarpeta + @"\done.csv");

                    }

                    if (File.Exists(rutaErrors))
                    {
                        // Crear una nueva carpeta con la fecha actual
                        if (!Directory.Exists(rutaCarpeta))
                        {
                            Directory.CreateDirectory(rutaCarpeta);
                        }
                        // Mover errors.csv a la nueva carpeta
                        File.Move(rutaErrors, rutaCarpeta + @"\errors.csv");

                    }
                }
                else
                {
                    Console.WriteLine("La carpeta Results no existe");
                    return;
                }

            }
            numTotal = personas.Count;
            numTotalTotal = numTotal;
            tv_NumEnviados.Text = numEnviados + "/1000";
            tv_NumErrores.Text = numErrors.ToString();
            int numeroPendientes = (numTotal - numErrors + numEnviados);
            if (numeroPendientes < 0) { numeroPendientes = 0; }
            tv_NumPendientes.Text = numeroPendientes.ToString();

            foreach (Persona persona in personas)
            {
                grid_datos.Rows.Add(persona.Nombre, persona.Email, persona.Archivo);
            }
        }

        /**
        * Genera un número aleatorio de espera.
        *
        * Esta función genera un número aleatorio en el rango de 2 a 15.
        *
        * @return int El número aleatorio generado.
        *//**
 * Evento de carga del formulario.
 *
 * Este evento se dispara cuando el formulario se carga.
 * Lee el archivo de configuración, muestra la información del email en uso, configura la generación automática de columnas en un control DataGridView y establece el texto de un TextBox.
 *
 * @param sender El objeto que desencadenó el evento.
 * @param e Los argumentos del evento.
 */
        public int GetRandomNumberEspera()
        {
            Random random = new Random();
            return random.Next(2, 15);
        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void label6_Click(object sender, EventArgs e)
        {

        }
        /**
        * Evento de carga del formulario.
        *
        * Este evento se dispara cuando el formulario se carga.
        * Lee el archivo de configuración, muestra la información del email en uso, configura la generación automática de columnas en un control DataGridView y establece el texto de un TextBox.
        *
        * @param sender El objeto que desencadenó el evento.
        * @param e Los argumentos del evento.
        */
        private void Form1_Load(object sender, EventArgs e)
        {
            readConfigFile();
            tv_emailEnUso.Text = config.Email.ToString();
            grid_datos.AutoGenerateColumns = false;
            tb_FolderFile.Text = ruta;


        }
        /**
        * Evento de clic en el botón 3.
        *
        * Este evento se dispara cuando se hace clic en el botón 3.
        * Muestra un cuadro de diálogo para seleccionar una carpeta y actualiza el texto de un TextBox con la ruta seleccionada.
        *
        * @param sender El objeto que desencadenó el evento.
        * @param e Los argumentos del evento.
        */
        private void button3_Click(object sender, EventArgs e)
        {
            using (var fbd = new FolderBrowserDialog())
            {
                DialogResult result = fbd.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(fbd.SelectedPath))
                {

                    tb_FolderFile.Text = fbd.SelectedPath;
                    ruta = fbd.SelectedPath;
                    string[] files = Directory.GetFiles(fbd.SelectedPath);
                    MessageBox.Show("La carpeta contiene: " + files.Length.ToString() + " archivos.", "Información");
                    carpeta_defined = true;
                }
            }
        }
        /**
        * Evento de clic en el botón 2.
        *
        * Este evento se dispara cuando se hace clic en el botón 2.
        * Establece la variable "is_stop" en true.
        *
        * @param sender El objeto que desencadenó el evento.
        * @param e Los argumentos del evento.
        */
        private void button2_Click(object sender, EventArgs e)
        {is_stop = true;}















        /****
         * 
         *   COMPROVACIO DE ERRORS 
         * 
         ****/
        /**
        * Prueba la conexión a través de una solicitud HTTP.
        *
        * Esta función realiza una solicitud HTTP a una URL específica para probar la conexión.
        * Si la solicitud se realiza correctamente (código de estado 200), se considera que la conexión es exitosa y devuelve false.
        * En caso de error durante la solicitud, se considera que la conexión falló y devuelve true.
        *
        * @return bool true si la conexión falló, false si la conexión fue exitosa.
        * @author @j0rd1s3rr4n0
        * @date 06/06/2023
        */
        public bool testConnection()
        {
            try
            {
                string HostURI = "https://dns.google/query?name=8.8.8.8";
                HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(HostURI);
                request.Method = "GET";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse()) {
                    switch (response.StatusCode)
                    {
                        case HttpStatusCode.OK: return false; break;
                        default: return false;
                    }
                }
            }
            catch (Exception ex){return true;}
        }
        /**
        * Verifica las credenciales de correo electrónico.
        *
        * Esta función intenta enviar un correo electrónico utilizando las credenciales de configuración proporcionadas.
        * Si el envío del correo electrónico se realiza correctamente, se considera que las credenciales son válidas y devuelve false.
        * Si se produce una excepción durante el envío del correo electrónico, se considera que las credenciales son inválidas y devuelve true.
        *
        * @return bool true si las credenciales son inválidas, false si las credenciales son válidas.
        */
        public bool CheckCredentials()
        {
            try
            {
                using (var testClient = new SmtpClient(config.Servidor, Int32.Parse(config.Puerto.ToString())))
                {
                    MailMessage mail = new MailMessage();
                    SmtpClient SmtpServer = new SmtpClient(config.Servidor);

                    mail.From = new MailAddress(config.Email);
                    mail.To.Add("");
                    mail.Subject = "";
                    mail.Body = "";
                    SmtpServer.Port = Int32.Parse(config.Puerto.ToString());
                    SmtpServer.Credentials = new NetworkCredential(config.Email, config.Contraseña);
                    SmtpServer.EnableSsl = true;
                    SmtpServer.Send(mail);
                    return false;
                }
            }
            catch (SmtpException ex)
            {
                return true;
            }
        }
        /**
        * Prueba la conexión a un servidor SMTP.
        *
        * Esta función intenta establecer una conexión SMTP con el servidor y enviar un mensaje de prueba.
        * Si la conexión y el envío del mensaje se realizan correctamente, se considera que la conexión es exitosa y devuelve true.
        * En caso de error durante la conexión o el envío del mensaje, se considera que la conexión falló y devuelve false.
        *
        * @param server El servidor SMTP al que se intentará conectar.
        * @param port El puerto SMTP que se utilizará para la conexión.
        * @return bool true si la conexión fue exitosa, false si la conexión falló.
        * @author @j0rd1s3rr4n0
        * @date 06/06/2023
        */
        public bool TestSmtpServerConnection(string server, int port)
        {
            try
            {
                using (var smtpClient = new SmtpClient(server, port))
                {
                    smtpClient.Timeout = 5000; // Establecer tiempo de espera a 5 segundos
                    smtpClient.Send("test@example.com", "test@example.com", "Test Message", "This is a test message.");
                }

                return true;
            }
            catch (SmtpException)
            {
                return false;
            }
        }

            /**
            * Maneja una excepción durante el envío de correo electrónico.
            *
            * Esta función maneja diferentes tipos de excepciones relacionadas con el envío de correo electrónico.
            * Dependiendo del tipo de excepción, muestra un mensaje de error específico y realiza algunas acciones adicionales.
            * Siempre devuelve true para indicar que se ha manejado la excepción.
            *
            * @param errorSend La excepción que se produjo durante el envío de correo electrónico.
            * @return bool Siempre devuelve true.
            * @author @j0rd1s3rr4n0
            * @date 06/06/2023
            */
        private bool HandleSendEmailException(SmtpException errorSend)
        {
            ArrayList errores = new ArrayList();
            if (errorSend.Message.Contains("No es posible conectar con el servidor remoto"))
            {
                MessageBox.Show("ERROR EN LA CONFIGURACIÓN DE CONNEXIÓN\nREVISE EL SERVIDOR Y EL PUERTO.", "ERROR DE CONEXIÓN", MessageBoxButtons.OK, MessageBoxIcon.Error);
                is_stop = true;
            }
            else if (errorSend.Message.Contains("This message was blocked because its content presents a potential"))
            {
                MessageBox.Show("ERROR AL ENVIAR EL ARCHIVO,\n FUE BLOQUEADO POR CONTENIDO POTENCIALMENTE PELIGROSO.", "ERROR AL ENVIAR ARCHIVO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                is_stop = true;
            }
            else if (errorSend.Message.Contains("No se pueden leer los datos de la conexión de transporte"))
            {
                MessageBox.Show("ERROR AL ENVIAR EL ARCHIVO,\n ARCHIVO DEMASIADO GRANDE, RECHAZADO POR EL SERVIDOR.", "ERROR AL ENVIAR ARCHIVO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                MessageBox.Show(errorSend.Message, "ERROR GENERAL", MessageBoxButtons.OK, MessageBoxIcon.Error);
                is_stop = true;
            }
            return true;
        }
        /**
        * Maneja una excepción al contactar con el servidor.
        *
        * Esta función muestra un mensaje de error en un cuadro de diálogo indicando que ha ocurrido un error al contactar con el servidor.
        * También muestra el mensaje y la fuente de la excepción recibida como parámetro.
        *
        * @param error La excepción que se produjo al contactar con el servidor.
        * @return void
        * @author @j0rd1s3rr4n0
        * @date 06/06/2023
        */
        private void HandleContactServerException(Exception error)
        {
            MessageBox.Show("ERROR AL CONTACTAR CON EL SERVIDOR.", "ERROR DE CONEXIÓN", MessageBoxButtons.OK, MessageBoxIcon.Error);
            MessageBox.Show(error.Message, error.Source);
            is_stop = true;
        }
        /**
        * Verifica si un puerto está abierto en un servidor.
        *
        * Esta función intenta establecer una conexión TCP con el servidor en el puerto especificado.
        * Si la conexión se establece correctamente, se considera que el puerto está abierto y se devuelve true.
        * Si se produce una excepción durante la conexión, se considera que el puerto está cerrado y se devuelve false.
        *
        * @param server El servidor al que se intentará conectar.
        * @param port El puerto que se comprobará.
        * @return bool true si el puerto está abierto, false si está cerrado.
        * @author @j0rd1s3rr4n0
        * @date 06/06/2023
        */
        public static bool IsPortOpen(string server, int port)
        {
            try
            {
                using (var client = new TcpClient(server, port))
                {
                    return true;
                }
            }
            catch
            {
                return false;
            }
        }
        /**
        * Verifica si alguno de los puertos SMTP está abierto en un servidor.
        *
        * Esta función comprueba si alguno de los puertos SMTP está abierto en el servidor especificado.
        * Recorre una lista de puertos SMTP predefinidos y utiliza la función IsPortOpen para comprobar si cada uno de ellos está abierto.
        * Si encuentra un puerto abierto, se considera que el servidor no está configurado correctamente y devuelve false.
        * Si todos los puertos están cerrados, se considera que el servidor está configurado correctamente y devuelve true.
        *
        * @param server El servidor al que se intentará conectar.
        * @return bool true si ninguno de los puertos SMTP está abierto, false si al menos uno de ellos está abierto.
         * @author @j0rd1s3rr4n0
        * @date 06/06/2023
        */
        public static bool IsSMTPOpen(string server)
        {
            int[] smtpPorts = { 25, 587, 465 };
            foreach (int port in smtpPorts)
            {
                if (IsPortOpen(server, port))
                {
                    return false;
                }
            }
            return true;
        }


    }
}
